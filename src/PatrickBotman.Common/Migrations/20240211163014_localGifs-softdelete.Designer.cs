// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using PatrickBotman.Common.Persistence;

#nullable disable

namespace PatrickBotman.Common.Migrations
{
    [DbContext(typeof(PatrickBotmanContext))]
    [Migration("20240211163014_localGifs-softdelete")]
    partial class localGifssoftdelete
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.25")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("PatrickBotman.Common.Persistence.Entities.Blacklist", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<long>("ChatId")
                        .HasColumnType("bigint");

                    b.Property<int>("GifId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("GifId");

                    b.ToTable("Blacklists");
                });

            modelBuilder.Entity("PatrickBotman.Common.Persistence.Entities.ConfigEntry", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("ConfigEntries");
                });

            modelBuilder.Entity("PatrickBotman.Common.Persistence.Entities.Gif", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("GifUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Gifs");
                });

            modelBuilder.Entity("PatrickBotman.Common.Persistence.Entities.GifFile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<byte[]>("Data")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.Property<bool>("Deleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("GifFiles");
                });

            modelBuilder.Entity("PatrickBotman.Common.Persistence.Entities.PollData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("GifFileId")
                        .HasColumnType("integer");

                    b.Property<long>("PollChatId")
                        .HasColumnType("bigint");

                    b.Property<string>("PollId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("GifFileId");

                    b.ToTable("PollData");
                });

            modelBuilder.Entity("PatrickBotman.Common.Persistence.Entities.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsAdmin")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("PatrickBotman.Common.Persistence.Entities.Blacklist", b =>
                {
                    b.HasOne("PatrickBotman.Common.Persistence.Entities.Gif", "Gif")
                        .WithMany("Blacklist")
                        .HasForeignKey("GifId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Gif");
                });

            modelBuilder.Entity("PatrickBotman.Common.Persistence.Entities.PollData", b =>
                {
                    b.HasOne("PatrickBotman.Common.Persistence.Entities.GifFile", "GifFile")
                        .WithMany()
                        .HasForeignKey("GifFileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GifFile");
                });

            modelBuilder.Entity("PatrickBotman.Common.Persistence.Entities.Gif", b =>
                {
                    b.Navigation("Blacklist");
                });
#pragma warning restore 612, 618
        }
    }
}
